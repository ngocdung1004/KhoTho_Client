import React, { useEffect, useState } from 'react';
import Footer from '../../FooterDiv/Footer';
import NavBar from '../../NavBarLogin/NavBar';
import './RegisterWorker.css';
import axios from "axios";
import { useNavigate } from "react-router-dom";
import * as config from "../../../services/config";
import { API_ENDPOINT } from "../../../services/config";

import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { ToastContainer } from "react-toastify";
import {
  GeoapifyGeocoderAutocomplete,
  GeoapifyContext,
} from "@geoapify/react-geocoder-autocomplete";
import { Input } from "antd";
import { Link } from 'react-router-dom';

const RegisterWorker = () => {
    const USERnow = JSON.parse(localStorage.getItem("userData"));
    const token = localStorage.getItem("authToken");
    // S·ª≠ d·ª•ng useState ƒë·ªÉ kh·ªüi t·∫°o gi√° tr·ªã cho c√°c tr∆∞·ªùng
    const [name, setName] = useState(USERnow ? USERnow.fullName : "");
    const [phone, setPhone] = useState(USERnow ? USERnow.phoneNumber : "");
    const [email, setEmail] = useState(USERnow ? USERnow.email : "");
    const [address, setAddress] = useState(USERnow ? USERnow.address : "");
    const [suggestions, setSuggestions] = useState([]);

    const navigate = useNavigate();

    const [profileImage, setProfileImage] = useState(null);
    const [activeTab, setActiveTab] = useState('basicInfo'); // State to track active tab
    const [frontCCCD, setFrontCCCD] = useState(null);  // State for front image
    const [backCCCD, setBackCCCD] = useState(null);    // State for back image

    const [nationality, setNationality] = useState('Vietnam'); // default value
    const [industryGroup, setIndustryGroup] = useState('');
    const [specialization, setSpecialization] = useState('');
    const [yearsExperience, setYearsExperience] = useState(0);
    const [selfIntroduction, setSelfIntroduction] = useState('');

    const [agreeTerms, setAgreeTerms] = useState(false);
    const [showTermsModal, setShowTermsModal] = useState(false);


    // Th√™m state ƒë·ªÉ l∆∞u tr·ªØ file ·∫£nh th·ª±c t·∫ø
const [profileImageFile, setProfileImageFile] = useState(null);
const [frontCCCDFile, setFrontCCCDFile] = useState(null);
const [backCCCDFile, setBackCCCDFile] = useState(null);


    const [Workers, setWorkers] = useState(null)

    const [jobTypes, setJobTypes] = useState([]); // L∆∞u tr·ªØ danh s√°ch job types
    const API_KEY = "KBGL0ihukFkc3MeOxPxktzGM2eY82Ow9KB5xswAI";
    const handleAddressChange = async (location) => {
      
      setAddress(location); 
  
      if (address.length > 0) {
          const response = await axios.get(
            "https://rsapi.goong.io/Place/AutoComplete",
            {
              params: {
                api_key: API_KEY,
                input: address,
              },
            }
          );
          setSuggestions(response.data.predictions); 
      }
    };
  

    // L·∫•y d·ªØ li·ªáu job types t·ª´ API
    useEffect(() => {
      const fetchJobTypes = async () => {
          try {
              const response = await axios.get(`${API_ENDPOINT}/api/JobTypes`, {
                  headers: {
                      "Content-Type": "application/json",
                      Authorization: `Bearer ${token}`,
                  },
              });
              setJobTypes(response.data); // L∆∞u d·ªØ li·ªáu job types v√†o state
          } catch (error) {
              console.error("Error fetching job types:", error);
          }
      };
      fetchJobTypes();
  }, [token]);

  const handleSubmit_ = async (e) => {
    e.preventDefault();
  
    try {
      const token = localStorage.getItem('authToken');
      if (!token) {
        toast.error('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y!', { position: "top-left", autoClose: 3000 });
        return;
      }
  
      const userData = localStorage.getItem('userData');
      if (!userData) {
        toast.error('Kh√¥ng t√¨m th·∫•y userData. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!', { position: "top-left", autoClose: 3000 });
        return;
      }
  
      const parsedUserData = JSON.parse(userData);
      const userId = parsedUserData.userId;
      if (!userId) {
        toast.error('Kh√¥ng t√¨m th·∫•y userId. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!', { position: "top-left", autoClose: 3000 });
        return;
      }
  
      // T·∫°o FormData object
      const formData = new FormData();
      formData.append('UserId', userId);
      formData.append('ExperienceYears', yearsExperience);
      formData.append('Rating', 0);
      formData.append('Bio', selfIntroduction);
      formData.append('Verified', true);
      formData.append('JobTypeIds', industryGroup);
  
      // Th√™m file ·∫£nh n·∫øu c√≥
      if (profileImageFile) {
        formData.append('ProfileImage', profileImageFile);
      }
      if (frontCCCDFile) {
        formData.append('FrontIdcard', frontCCCDFile);
      }
      if (backCCCDFile) {
        formData.append('BackIdcard', backCCCDFile);
      }
  
      const response = await axios.post(
        `${API_ENDPOINT}/api/Workers`,
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data',
            Authorization: `Bearer ${token}`,
          },
        }
      );
  
      toast.success("ƒêƒÉng k√Ω th√†nh c√¥ng!", { position: "top-left", autoClose: 3000 });
      setTimeout(() => navigate("/workers"), 1000);
    } catch (error) {
      console.error('Error:', error);
      toast.error('C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!', { position: "top-left", autoClose: 3000 });
    }
  };
  

  // H√†m x·ª≠ l√Ω upload ·∫£nh Profile
const handleImageUpload = (event) => {
  const file = event.target.files[0];
  if (file) {
    setProfileImageFile(file); // L∆∞u file ·∫£nh th·ª±c t·∫ø
    const imageUrl = URL.createObjectURL(file);
    setProfileImage(imageUrl); // L∆∞u URL preview
  }
};

// H√†m x·ª≠ l√Ω upload ·∫£nh CCCD
const handleCCCDUpload = (event, type) => {
  const file = event.target.files[0];
  if (file) {
    const imageUrl = URL.createObjectURL(file);
    if (type === 'front') {
      setFrontCCCDFile(file); // L∆∞u file g·ªëc
      setFrontCCCD(imageUrl); // L∆∞u URL preview
    } else if (type === 'back') {
      setBackCCCDFile(file); // L∆∞u file g·ªëc
      setBackCCCD(imageUrl); // L∆∞u URL preview
    }
  }
};


  // Function to handle tab change
  const handleTabChange = (tab) => {
    setActiveTab(tab);
  };



  return (
    <div className="w-[85%] m-auto white-color-sl">
      <ToastContainer position="top-right" autoClose={3000} />
        <NavBar />
        <div className='body'>
            <div className='title'>
              <h2 className="section-title" data-wow-delay="0.3s">ƒêƒÉng k√Ω th√¥ng tin ƒë·ªÉ b·∫Øt ƒë·∫ßu nh·∫≠n vi·ªác</h2>
              <div className="symbol-container">
                  <span>‚òÖ</span>  
                  <span>‚òÖ</span>  
                  <span>‚òÖ</span> 
              </div>
            </div>
            <div className='flex'>

                <div className="profile-details text-center left-block">
                {/* Profile Picture */}
                    <div className="profile-image-container relative inline-block mb-6">
                        <img
                        src={profileImage || "default-profile.png"}
                        alt="Profile"
                        className="profile-image w-60 h-60 rounded-full border-4 border-gray-300 shadow-lg transition-all duration-300 hover:scale-105"
                        />
                        <input
                        type="file"
                        id="fileUpload"
                        style={{ display: 'none' }}
                        onChange={handleImageUpload}
                        />
                        <label
                        htmlFor="fileUpload"
                        className="upload-icon absolute bottom-0 right-0 bg-blue-500 text-white rounded-full p-3 cursor-pointer transition-all duration-300 transform hover:scale-110"
                        >
                        üì∑
                        </label>
                    </div>
                </div>

                <div className="right-block">
            {/* Settings Tabs */}
            <div className="settings-tabs flex justify-around mt-6 mb-4 border-b border-gray-200">

              <div
                className={`tab cursor-pointer pb-2 ${activeTab === 'basicInfo' ? 'border-b-2 border-blue-500' : ''}`}
                onClick={() => handleTabChange('basicInfo')}
              >
                Th√¥ng tin c∆° b·∫£n
              </div>

              <div
                className={`tab cursor-pointer pb-2 ${activeTab === 'introductionInfo' ? 'border-b-2 border-blue-500' : ''}`}
                onClick={() => handleTabChange('introductionInfo')}
              >
                Gi·ªõi thi·ªáu
              </div>

              <div
                className={`tab cursor-pointer pb-2 ${activeTab === 'cccd' ? 'border-b-2 border-blue-500' : ''}`}
                onClick={() => handleTabChange('cccd')}
              >
                CCCD
              </div>

            </div>

            {/* Form for Account Settings (Basic Info) */}
            {activeTab === 'basicInfo' && (
              <div className="form-container">
                <div className="form-row mb-4">
                  <label className="block text-gray-600">T√™n</label>
                  <input type="text" className="input-field" value={name} onChange={(e) => setName(e.target.value)}/>
                </div>
                <div className="form-row mb-4">
                  <label className="block text-gray-600">S·ªë ƒëi·ªán tho·∫°i</label>
                  <input type="text" className="input-field" value={phone} onChange={(e) => setPhone(e.target.value)} />
                </div>
                <div className="form-row mb-4">
                  <label className="block text-gray-600">Email</label>
                  <input type="email" className="input-field" value={email} onChange={(e) => setEmail(e.target.value)}/>
                </div>
                <div>
                  <div className="form-row mb-4">
                    <label className="block text-gray-600">N∆°i th∆∞·ªùng tr√∫</label>
                    <input
                      type="text"
                      className="input-field"
                      value={address}
                      onChange={(e) => handleAddressChange(e.target.value)}
                    />
                    {suggestions?.length > 0 && (
                      <ul className="suggestion-list">
                        {suggestions.map((suggestion, index) => (
                          <li
                            key={index}
                            className="suggestion-item cursor-pointer hover:bg-gray-200 px-2 py-1"
                            onClick={() => {
                              setAddress(suggestion.description);
                              setSuggestions([]); 
                            }}
                          >
                            {suggestion.description}
                          </li>
                        ))}
                      </ul>
                    )}
                  </div>
                </div>

                <div className="form-row mb-4">
                  <label className="block text-gray-600">Qu·ªëc t·ªãch</label>
                  <select className="input-field" value={nationality} onChange={(e) => setNationality(e.target.value)}>
                    <option value="Vietnam">Vi·ªát Nam</option>
                    <option value="America">America</option>
                    <option value="Canada">Canada</option>
                  </select>
                </div>
              </div>
            )}

            {/* Form for Account Settings (Introduction Info) */}
            {activeTab === 'introductionInfo' && (
                <div className="form-container max-h-screen overflow-y-auto p-4 bg-white rounded shadow-md h-[600px]">
                {/* Option for Industry Group (Dropdown) */}
                <div className="form-row mb-4">
                  <label className="block text-gray-600">Nh√≥m ng√†nh</label>
                  <select
                    className="input-field"
                    value={industryGroup}
                    onChange={(e) => setIndustryGroup(e.target.value)}
                  >
                    <option value="">Ch·ªçn nh√≥m ng√†nh</option>
                    {jobTypes.map((jobType) => (
                      <option key={jobType.jobTypeId} value={jobType.jobTypeId}>
                        {jobType.jobTypeName}
                      </option>
                    ))}
                  </select>
                </div>
              
                {/* Text Input for Specialization */}
                <div className="form-row mb-4">
                  <label className="block text-gray-600">Chuy√™n m√¥n</label>
                  <input
                    type="text"
                    placeholder="S·ª≠a ch·ªØa m√°y gi·∫∑t"
                    className="input-field"
                    value={specialization}
                    onChange={(e) => setSpecialization(e.target.value)}
                  />
                </div>
              
                {/* Number Input for Years of Experience */}
                <div className="form-row mb-4">
                  <label className="block text-gray-600">S·ªë nƒÉm kinh nghi·ªám</label>
                  <input
                    type="number"
                    min="0"
                    placeholder="0"
                    className="input-field"
                    value={yearsExperience}
                    onChange={(e) => setYearsExperience(e.target.value)}
                  />
                </div>
              
                {/* Text Input for Self Introduction */}
                <div className="form-row mb-6">
                  <label className="block text-gray-600">Gi·ªõi thi·ªáu b·∫£n th√¢n</label>
                  <textarea
                    placeholder="H√£y nh·∫≠p gi·ªõi thi·ªáu b·∫£n th√¢n b·∫°n..."
                    rows="8"
                    className="input-field"
                    value={selfIntroduction}
                    onChange={(e) => setSelfIntroduction(e.target.value)}
                  ></textarea>
                </div>
              
                {/* Th√¥ng tin thanh to√°n */}
                <div>
                  <div className="text-lg font-semibold mb-4">Th√¥ng tin thanh to√°n</div>
              
                  {/* Image ng√¢n h√†ng */}
                  <div className="mb-4 flex justify-center">
                    <img
                      src="https://i.imgur.com/lLvi0Si.png"
                      alt="Ng√¢n h√†ng"
                      className="h-80 object-contain"
                    />
                  </div>
              
                  {/* T√™n ng√¢n h√†ng */}
                  <div className="form-row mb-4">
                    <label className="block text-gray-600">Ng√¢n H√†ng</label>
                    <input
                      type="text"
                      placeholder="MBBank"
                      className="input-field w-full border p-2 rounded"
                    />
                  </div>
              
                  {/* S·ªë t√†i kho·∫£n */}
                  <div className="form-row mb-4">
                    <label className="block text-gray-600">S·ªë t√†i kho·∫£n</label>
                    <input
                      type="text"
                      placeholder="7979797979"
                      className="input-field w-full border p-2 rounded"
                    />
                  </div>
                </div>
              </div>
              
                )}

            {/* Form for CCCD (Citizen ID) */}
            {activeTab === 'cccd' && (
              <div className="form-container maskA">
                <div className="form-row mb-4">
                  <label className="block text-gray-600">M·∫∑t tr∆∞·ªõc CCCD</label>
                  <input 
                    type="file" 
                    className="input-field"
                    onChange={(e) => handleCCCDUpload(e, 'front')} 
                  />
                  {/* Display preview of front CCCD image */}
                  {frontCCCD && (
                    <div className="image-preview mt-2">
                      <img src={frontCCCD} alt="M·∫∑t tr∆∞·ªõc CCCD" className="w-48 h-48 object-cover border rounded-md" />
                    </div>
                  )}
                </div>
                <div className="form-row mb-4">
                  <label className="block text-gray-600">M·∫∑t sau CCCD</label>
                  <input 
                    type="file" 
                    className="input-field"
                    onChange={(e) => handleCCCDUpload(e, 'back')} 
                  />
                  {/* Display preview of back CCCD image */}
                  {backCCCD && (
                    <div className="image-preview mt-2">
                      <img src={backCCCD} alt="M·∫∑t sau CCCD" className="w-48 h-48 object-cover border rounded-md" />
                    </div>
                  )}
                </div>

                  {/* Checkbox ƒëi·ªÅu kho·∫£n */}
                  <div className="form-row mb-4 flex gap-2">
                    <label className="flex text-sm text-gray-700 gap-2">
                    <input
                      type="checkbox"
                      checked={agreeTerms}
                      onChange={() => setAgreeTerms(!agreeTerms)}/>

                      T√¥i ƒë·ªìng √Ω v·ªõi{" "}
                      <span
                        className="text-blue-600 underline cursor-pointer"
                        onClick={() => setShowTermsModal(true)}
                      >
                        ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng
                      </span>
                    </label>
                  </div>

                {/* N√∫t x√°c nh·∫≠n */}
                <button
                  className={`update-button rounded-md px-4 py-2 w-full mt-2 ${
                    agreeTerms
                      ? "bg-blue-600 text-white hover:bg-blue-700"
                      : "bg-gray-400 text-white cursor-not-allowed"
                  }`}
                  onClick={handleSubmit_}
                  disabled={!agreeTerms}
                >
                  X√°c nh·∫≠n th√¥ng tin
                </button>

                {/* Modal ƒëi·ªÅu kho·∫£n */}
                {showTermsModal && (
                    <div className="fixed inset-0 bg-black bg-opacity-40 flex justify-center items-center z-50 px-4">
                      {/* N√∫t ƒë√≥ng */}
                  
                      <div className="bg-white rounded-lg p-8 w-full max-w-8xl max-h-[75vh] overflow-y-auto relative shadow-lg">
                        
                      <button
                          className="absolute top-4 right-4 text-2xl text-gray-600 hover:text-black"
                          onClick={() => setShowTermsModal(false)}
                        >
                          &times;
                        </button>

                        {/* Ti√™u ƒë·ªÅ */}
                        <h2 className="text-2xl font-bold mb-6 text-center">ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng</h2>

                        {/* N·ªôi dung ƒëi·ªÅu kho·∫£n t·ª´ file KHOTHO */}
                        <div className="text-gray-700 text-base space-y-4 text-justify leading-relaxed">
                          <h2>Quy ƒë·ªãnh chung</h2>
                          <h1>Quy ch·∫ø ho·∫°t ƒë·ªông website</h1>
                          <p>
                            1. Ng∆∞·ªùi d√πng: l√† m·ªôt c√° nh√¢n lao ƒë·ªông nh∆∞ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a d∆∞·ªõi ƒë√¢y, v√† bao g·ªìm b·∫•t k·ª≥ ng∆∞·ªùi n√†o duy·ªát v√†/ho·∫∑c xem Website, c≈©ng nh∆∞ b·∫•t k·ª≥ ng∆∞·ªùi lao ƒë·ªông n√†o tr√™n Website ph√π h·ª£p v·ªõi c√°c quy ƒë·ªãnh c·ªßa ph√°p lu·∫≠t, quy ƒë·ªãnh v√† ch√≠nh s√°ch kh√°c c·ªßa Kho Th·ª£. ‚ÄúC√° nh√¢n‚Äù ‚Äì C√°c d·ªãch v·ª• ch·ªâ ƒë∆∞·ª£c cung c·∫•p cho c√°c c√° nh√¢n c√≥ kh·∫£ nƒÉng tham gia v√†o m·ªôt th·ªèa thu·∫≠n c√≥ hi·ªáu l·ª±c ph√°p l√Ω theo lu·∫≠t Vi·ªát Nam.
                          </p>
                          <p>
                            - Khi ƒëƒÉng k√Ω t√†i kho·∫£n, ng∆∞·ªùi d√πng ƒë∆∞·ª£c xem l√† Th√†nh vi√™n c·ªßa Kho Th·ª£ (‚ÄúTh√†nh vi√™n‚Äù). Ng∆∞·ªùi d√πng hi·ªÉu r·∫±ng:
                            <br />+ Ng∆∞·ªùi d√πng c√≥ th·ªÉ t·∫°o m·ªôt t√†i kho·∫£n c√° nh√¢n c·ªßa m√¨nh ƒë·ªÉ s·ª≠ d·ª•ng.
                            <br />+ Ng∆∞·ªùi d√πng c√≥ th·ªÉ ƒëƒÉng tin theo ƒë√∫ng quy chu·∫©n, cam k·∫øt c·ªßa th√†nh vi√™n h·ª£p ph√°p ƒë√£ c√¥ng b·ªë tr√™n s√†n.
                          </p>
                          <p>
                            2. Kho Th·ª£ c√≥ th·ªÉ s·ª≠a ƒë·ªïi Quy ch·∫ø t√πy t·ª´ng th·ªùi ƒëi·ªÉm v√¨ c√°c l√Ω do li√™n quan ƒë·∫øn lu·∫≠t ph√°p hay quy ƒë·ªãnh, ho·∫∑c ƒë·ªÉ ƒë·∫£m b·∫£o Website ho·∫°t ƒë·ªông ƒë√∫ng c√°ch v√† su√¥n s·∫ª.
                            N·∫øu ng∆∞·ªùi d√πng ti·∫øp t·ª•c s·ª≠ d·ª•ng Website sau ng√†y c√°c s·ª≠a ƒë·ªïi b·∫Øt ƒë·∫ßu c√≥ hi·ªáu l·ª±c, Ng∆∞·ªùi d√πng s·∫Ω ƒë∆∞·ª£c cho l√† ƒë√£ ƒë·ªìng √Ω b·ªã r√†ng bu·ªôc b·ªüi quy ch·∫ø s·ª≠a ƒë·ªïi. Trong tr∆∞·ªùng h·ª£p Ng∆∞·ªùi d√πng kh√¥ng ƒë·ªìng √Ω v·ªõi c√°c s·ª≠a ƒë·ªïi, Ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ti·∫øp t·ª•c s·ª≠ d·ª•ng Website v√† c√°c d·ªãch v·ª•.
                          </p>
                          <p>
                            3. D·ªãch v·ª• tham gia giao d·ªãch gi·ªØa th·ª£ v√† ng∆∞·ªùi d√πng ph·∫£i ƒë√°p ·ª©ng ƒë·∫ßy ƒë·ªß c√°c quy ƒë·ªãnh c·ªßa ph√°p lu·∫≠t c√≥ li√™n quan, kh√¥ng thu·ªôc c√°c tr∆∞·ªùng h·ª£p c·∫•m kinh doanh, c·∫•m qu·∫£ng c√°o theo quy ƒë·ªãnh c·ªßa ph√°p lu·∫≠t.
                          </p>
                          <p>
                          4. Ho·∫°t ƒë·ªông s·ª≠ d·ª•ng d·ªãch v·ª• qua Kho Th·ª£ ph·∫£i ƒë∆∞·ª£c th·ª±c hi·ªán c√¥ng khai, minh b·∫°ch, ƒë·∫£m b·∫£o quy·ªÅn l·ª£i c·ªßa ng∆∞·ªùi ti√™u d√πng. N·ªôi dung kh√¥ng ph√π h·ª£p th√¨ c√≥ quy·ªÅn x√≥a, ch·ªânh s·ª≠a ho·∫∑c t·ª´ ch·ªëi tin ƒëƒÉng n·∫øu n·ªôi dung kh√¥ng ph√π h·ª£p v·ªõi quy ƒë·ªãnh.
                          </p>
                          <br />
                          <br />

                          <h1>H√¨nh th·ª©c thanh to√°n v√† giao nh·∫≠n</h1>
                          <p>1. Ng∆∞·ªùi d√πng t·ª± tho·∫£ thu·∫≠n v·ªÅ h√¨nh th·ª©c thanh to√°n.</p>
                          <p>2. Kho Th·ª£ kh√¥ng tham gia v√†o quy tr√¨nh thanh to√°n hay v·∫≠n chuy·ªÉn h√†ng h√≥a.</p>
                          <br />
                          <br />

                          <h1>D·ªãch v·ª• b·ªã c·∫•m</h1>
                          <p>1. Cung c·∫•p thi·∫øt b·ªã l√† h√†ng gi·∫£, h√†ng nh√°i, h√†ng k√©m ch·∫•t l∆∞·ª£ng.</p>
                          <p>2. Trao ƒë·ªïi V≈© kh√≠, ma t√∫y, thu·ªëc l√° v√† c√°c ch·∫•t g√¢y nghi·ªán.</p>
                          <p>3. C√°c d·ªãch v·ª• ph·∫°m ph√°p nh∆∞ cho vay n·∫∑ng l√£i, c·ªù b·∫°c.</p>
                          <br />
                          <br />

                          <h1>Ch·∫•m d·ª©t quy·ªÅn s·ª≠ d·ª•ng</h1>
                          <p>1. C√°c n·ªôi dung vi ph·∫°m quy·ªÅn s·ªü h·ªØu tr√≠ tu·ªá.</p>
                          <br />
                          <br />

                          <h2>Quy ƒë·ªãnh ƒë·ªëi v·ªõi ng∆∞·ªùi th·ª£</h2>
                          <h1>Quy tr√¨nh ƒëƒÉng k√Ω l√†m th·ª£ ƒë·ªÉ ƒë∆∞·ª£c qu·∫£ng b√° tr√™n website</h1>
                          <p>1. Khi m·ªôt ng∆∞·ªùi th·ª£ mu·ªën ƒë∆∞·ª£c l√™n website, h·ªç c·∫ßn ph·∫£i ƒëƒÉng k√≠ t√†i kho·∫£n tr√™n KhoTho v√† cung c·∫•p th√¥ng tin c√° nh√¢n bao g·ªìm: S∆° y·∫øu l√≠ l·ªãch, n∆°i c∆∞ tr√∫, h√¨nh ·∫£nh CCCD hai m·∫∑t, h√¨nh ·∫£nh ch√¢n dung, list c√¥ng vi·ªác, x√°c nh·∫≠n s·ªë ƒëi·ªán tho·∫°i, gi·∫•y x√°c nh·∫≠n l√† ng∆∞·ªùi b√¨nh th∆∞·ªùng (kh√¥ng c√≥ ti·ªÅn √°n ti·ªÅn s·ª± hay v·∫•n ƒë·ªÅ v·ªÅ s·ª©c kh·∫ªo). Th·ª£ ph·∫£i ƒë√≥ng ti·ªÅn cho s√†n ƒë·ªÉ ƒë∆∞·ª£c qu·∫£n b√° theo ph√≠ quy ƒë·ªãnh b·ªüi s√†n.</p>
                          <p>2. Khi m·ªôt ng∆∞·ªùi th·ª£ c√≥ ƒë∆∞·ª£c ng∆∞·ªùi d√πng book, h·ªç ph·∫£i trao ƒë·ªïi th√¥ng tin v·ªÅ c√° nh√¢n l·∫°i v·ªõi ng∆∞·ªùi d√πng. Sau khi bi·∫øt ƒë∆∞·ª£c ng∆∞·ªùi d√πng mu·ªën book c√¥ng vi·ªác g√¨ th√¨ ƒë∆∞a ra kho·∫£ng gi√° ph√π h·ª£p v·ªõi th·ªã tr∆∞·ªùng.Khi c·∫£ hai ƒëi ƒë·∫øn tho·∫£ thu·∫≠n ƒë·ªìng √Ω, th√¨ m·ªõi ƒë∆∞·ª£c ph√©p th·ª±c hi·ªán c√¥ng vi·ªác. N·∫øu trong qu√° tr√¨nh l√†m vi·ªác c√≥ ph√°p sinh v·∫•n ƒë·ªÅ, th·ª£ ph·∫£i ch·ªß ƒë·ªông b√°o c√°o v·ªõi ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c t·ª± √Ω th·ª±c hi·ªán m√† kh√¥ng ƒë∆∞·ª£c s·ª± ƒë·ªìng √Ω c·ªßa ng∆∞·ªùi d√πng. Khi ƒë√≥ b√™n s√†n s·∫Ω t·∫°o m·ªôt h·ª£p ƒë·ªìng online ƒë·ªÉ hai b√™n cam k·∫øt ƒë·ªÉ ƒë·∫£m b·∫£o quy·ªÅn l·ª£i kh√°ch h√†ng v√† cam k·∫øt th·ª£ l√†m ƒë√∫ng ƒë·∫°o ƒë·ª©c v√† ho√†n thi·ªán c√¥ng vi·ªác ƒë√£ nh·∫≠n.</p>
                          <br />- Sau khi ho√†n th√†nh c√¥ng vi·ªác th√¨ ph·∫£i ch·ª•p ·∫£nh/ video b·∫±ng ch·ª©ng ƒë√£ ho√†n th√†nh c√¥ng vi·ªác l√™n website.
                          <br />
                          <br />

                          <h1>Ch√≠nh s√°ch ƒëƒÉng tin</h1>
                          <p>1.Khi th·ª£ ƒëƒÉng k√≠ th√¥ng tin c√° nh√¢n l√™n s√†n, nh·ªØng th√¥ng tin ƒë√≥ ph·∫£i ch√≠nh x√°c, minh b·∫°ch, kh√¥ng gian d·ªëi, g√¢y nh·∫ßm l·∫´n.</p>
                          <p>2. Kh√¥ng ƒë∆∞·ª£c ƒëƒÉng tin li√™n quan ƒë·∫øn c√°c d·ªãch v·ª• b·ªã c·∫•m (v√≠ d·ª•: m·∫°i d√¢m, giao d·ªãch ma tu√Ω,...).</p>
                          <br />
                          <br />

                          <h2>Quy ƒë·ªãnh ƒë·ªëi v·ªõi ng∆∞·ªùi d√πng</h2>
                          <h1>Quy tr√¨nh ƒëƒÉng k√≠ c·ªßa ng∆∞·ªùi d√πng tr√™n website</h1>
                          <p>1. Khi ng∆∞·ªùi d√πng mu·ªën t√¨m ki·∫øm th·ª£ ƒë·ªÉ l√†m vi·ªác, h·ªçc c·∫ßn ph·∫£i ƒëƒÉng k√Ω t·∫°i kho·∫£n v√† cung c·∫•p m·ªôt s·ªë th√¥ng tin c√° nh√¢n bao g·ªìm: s∆° y·∫øu l√≠ l·ªãch, n∆°i c∆∞ tr√∫, s·ªë ƒëi·ªán tho·∫°i. Th·ª±c hi·ªán c√°c b∆∞·ªõc ƒëƒÉng k√Ω xong, th√¨ ng∆∞·ªùi d√πng c√≥ th·ªÉ book th·ª£ ƒë·ªÉ l√†m vi·ªác b·∫±ng c√°ch s·ª≠ d·ª•ng b·ªô l·ªçc, ƒë·ªçc th√¥ng tin c·ªßa th·ª£. Sau ƒë√≥ trao ƒë·ªïi tr·ª±c ti·∫øp v·ªõi th·ª£ ƒë·ªÉ hai b√™n ƒëi ƒë·∫øn tho·∫£ thu·∫≠n v√† ch·∫•p thu·∫≠n h·ªçp ƒë·ªìng online.</p>
                          <br />- Sau khi th·ª£ ho√†n th√†nh c√¥ng vi·ªác, ng∆∞·ªùi d√πng c√≥ th·ªÉ Feedback v√† ƒë√°nh gi√° th√¥ng qua website.
                          <br />
                          <br />

                          <h2>ƒê·ªëi v·ªõi KHOTHO</h2>
                          <h1>Tr√°ch nhi·ªám v√† quy·ªÅn h·∫°n c·ªßa KHOTHO</h1>
                          <p>1. Kho Th·ª£ ch·ªâ cung c·∫•p n·ªÅn t·∫£ng ƒë·ªÉ k·∫øt n·ªëi ng∆∞·ªùi th·ª£ v√† ng∆∞·ªùi d√πng, kh√¥ng ch·ªãu tr√°ch nhi·ªám v·ªÅ n·ªôi dung c√°c tin ƒëƒÉng ho·∫∑c ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m/d·ªãch v·ª•.</p>
                          <p>2. Kho Th·ª£ c√≥ quy·ªÅn t·ª´ ch·ªëi cung c·∫•p d·ªãch v·ª• ƒë·ªëi v·ªõi nh·ªØng tr∆∞·ªùng h·ª£p vi ph·∫°m ch√≠nh s√°ch ho·∫∑c quy ƒë·ªãnh ph√°p lu·∫≠t.</p>
                          <p>3. Kho Th·ª£ c√≥ th·ªÉ cung c·∫•p th√¥ng tin ng∆∞·ªùi d√πng cho c√°c c∆° quan ch·ª©c nƒÉng n·∫øu c√≥ y√™u c·∫ßu h·ª£p ph√°p.</p>
                          <br />
                          <br />

                          <h1>Ch√≠nh s√°ch b·∫£o m·∫≠t th√¥ng tin</h1>
                          <p>1. Kho Th·ª£ cam k·∫øt b·∫£o v·ªá th√¥ng tin c√° nh√¢n c·ªßa ng∆∞·ªùi d√πng theo quy ƒë·ªãnh v·ªÅ b·∫£o m·∫≠t.</p>
                          <p>2. Ng∆∞·ªùi d√πng c√≥ tr√°ch nhi·ªám b·∫£o m·∫≠t t√†i kho·∫£n c·ªßa m√¨nh, kh√¥ng chia s·∫ª th√¥ng tin t√†i kho·∫£n cho ng∆∞·ªùi kh√°c.</p>
                          <p>3. Kho Th·ª£ kh√¥ng ch·ªãu tr√°ch nhi·ªám v·ªÅ vi·ªác m·∫•t m√°t th√¥ng tin c√° nh√¢n n·∫øu do ng∆∞·ªùi d√πng chia s·∫ª th√¥ng tin t√†i kho·∫£n kh√¥ng an to√†n.</p>
                          <br />
                          <br />

                          <h1>Gi·∫£i quy·∫øt tranh ch·∫•p</h1>
                          <p>1. Kho Th·ª£ kh√¥ng tr·ª±c ti·∫øp tham gia v√†o c√°c giao d·ªãch gi·ªØa ng∆∞·ªùi th·ª£ v√† ng∆∞·ªùi d√πng, tuy nhi√™n c√≥ th·ªÉ h·ªó tr·ª£ trong vi·ªác gi·∫£i quy·∫øt tranh ch·∫•p.</p>
                          <p>2. Ng∆∞·ªùi d√πng c·∫ßn ch·ªß ƒë·ªông li√™n h·ªá v·ªõi nhau ƒë·ªÉ gi·∫£i quy·∫øt c√°c v·∫•n ƒë·ªÅ ph√°t sinh t·ª´ giao d·ªãch.</p>
                          <p>3. Trong tr∆∞·ªùng h·ª£p x·∫£y ra tranh ch·∫•p, Kho Th·ª£ c√≥ th·ªÉ cung c·∫•p th√¥ng tin li√™n l·∫°c gi·ªØa c√°c b√™n d·ª±a tr√™n quy ƒë·ªãnh ph√°p lu·∫≠t.</p>

                        </div>
                      </div>
                    </div>
                  )}



                
              </div>
            )}

          </div>

            </div>
        </div>
        <Footer />
    </div>
  );
};

export default RegisterWorker;